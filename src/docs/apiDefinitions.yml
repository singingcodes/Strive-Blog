openapi: 3.0.1
info:
  title: Strive Blog API
  description: StriveBooks API
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Local server
  - url: https://strive-blog-s.herokuapp.com/
    description: Deployed server
tags:
  - name: authors
    description: Operations about authors
  - name: blogPost
    description: Operations about blog posts
  - name: files
    description: All file operations
paths:
  /authors:
    get:
      tags:
        - authors
      summary: Returns a list of authors.
      description: Optional extended description in CommonMark or HTML.
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Filter authors list by title
      responses:
        "200":
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        "500":
          $ref: "#/components/responses/GenericServerError"
    post:
      tags:
        - authors
      summary: Create
      description: Adds a new author
      requestBody:
        description: The object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        "201":
          description: The ID of the newly created author
          content:
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/GenericServerError"
  /authors/{authorId}:
    get:
      tags:
        - authors
      summary: Get by Id
      description: Retrieve single Author
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
          description: The ID of the Author to retrieve
      responses:
        "200":
          description: The single Author
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
    put:
      tags:
        - authors
      description: Update an existing Author
      summary: Update
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
          description: The ID of the Author to update
      requestBody:
        description: Fields to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        "200":
          description: A list of Authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
    delete:
      tags:
        - authors
      summary: Delete
      description: Delete a specific Author by ID
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
          description: The ID of the Author to delete
      responses:
        "204":
          description: Empty Response
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
  /authors/upload:
    post:
      tags:
        - authors
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "200":
          description: Ok
        "404":
          $ref: "#/components/responses/NotFound"
  /blogPost:
    get:
      tags:
        - blogPost
      summary: Returns a list of blog Posts.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200":
          description: A list of blog post
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
        "500":
          $ref: "#/components/responses/GenericServerError"
    post:
      summary: Create
      description: Add a new blog post
      requestBody:
        description: The object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Blog"
      responses:
        "201":
          description: The ID of the newly created blog
          content:
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/GenericServerError"
      tags:
        - blogPost
  /blogPost/{postId}:
    summary: Specific user related endpoints
    get:
      summary: Get by Id
      description: Retrieve single blog's data
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the Post to delete
      operationId: ""
      responses:
        "200":
          description: The Blog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
      tags:
        - blogPost
    put:
      summary: Update
      description: Update an existing User
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the post to delete
      requestBody:
        description: The object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Blog"
      responses:
        "200":
          description: The modified Blog
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
      tags:
        - blogPost
    delete:
      summary: Delete
      description: Delete a specific blog by Id
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: The ID of the Post to delete
      operationId: ""
      responses:
        "204":
          description: No Content
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GenericServerError"
      tags:
        - blogPost
components:
  responses:
    NotFound:
      description: The specific resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: Some problems with your request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Bearer token missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    GenericServerError:
      description: A problem on the server occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Author:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        avatar:
          type: string
        email:
          type: string
        dob:
          type: string
    Blog:
      type: object
      properties:
        _id:
          type: string
        category:
          type: string
        title:
          type: string
        cover:
          type: string
        content:
          type: string
        author.name:
          type: string
        author.avatar:
          type: string
    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
